trend1
trend2
trend3
q17ans2 <- Deriv(q17ans)
q17ans2
concave1 <- q17ans2(root17[1])
concave1
q18 <- function(x){ x^3/3340000  -  (7*x^2)/9475  +  42417727*x/1265860000  +  1/33}
q18ans <- Deriv(q18)
q18ans
root18 <- uniroot.all(q18ans, c(-1000000,10000))
trend1a <- q17ans(root18-1)
trend2b <- q17ans(root18)
trend3c <- q17ans(root18+1)
trend1a
trend2b
trend3c
q18 <- function(x){ x^3/3340000  -  (7*x^2)/9475  +  42417727*x/1265860000  +  1/33}
q18ans <- Deriv(q18)
q18ans
root18 <- uniroot.all(q18ans, c(-1000000000,100000000))
trend1a <- q17ans(root18-1)
trend2b <- q17ans(root18)
trend3c <- q17ans(root18+1)
trend1a
trend2b
trend3c
q20 <- function(x){-6*x^3  + 27*x^2  + 180*x}
q20ans <- Deriv(q20)
q20ans
q20 <- function(x){-6*x^3  + 27*x^2  + 180*x}
q20ans <- Deriv(q20)
q20ans
q20ansSec <- Deriv(q20ans)
q20ansSec
q20 <- function(x){-6*x^3  + 27*x^2  + 180*x}
q20ans <- Deriv(q20)
q20ans
q20ansSec <- Deriv(q20ans)
q20ansSec
root20 <- uniroot.all(q20ans, c(-1000,1000))
q20 <- function(x){-6*x^3  + 27*x^2  + 180*x}
q20ans <- Deriv(q20)
q20ans
q20ansSec <- Deriv(q20ans)
q20ansSec
root20 <- uniroot.all(q20ans, c(-1000,1000))
q20ansSec(root20[1])
q20ansSec(root20[2])
q20 <- function(x){-6*x^3  + 27*x^2  + 180*x}
q20ans <- Deriv(q20)
q20ans
q20ansSec <- Deriv(q20ans)
q20ansSec
root20 <- uniroot.all(q20ans, c(-1000,1000))
q20ansSec(root20[1])
q20ansSec(root20[2])
q20ans(root20[1])
q20ans(root20[2])
cdxA beauty supply store expects to sell 120 flat irons during the next year.  It costs $1.60 to store one flat iron for one year.  To reorder, there is a fixed cost of $6 , plus $4.50  for each flat iron ordered.  In what lot size and how many times per year should an order be placed to minimize inventory costs?
install.packages("mosaic")
library(mosaic)
q28ans <- antiD((-5(lna(y) )^3)
q28ans
q28ans <- antiD((-5(loga(y) )^3)
q28ans
q28ans <- antiD(-5*(log(x)^3))
q28ans
q28ans <- antiD(-5*(log(x)^3))~x)
q28ans
A <- matrix(c(1,2,-1,2,1,1,-3,-3,2),3,3)
A <- matrix(c(1,2,-1,2,1,1,-3,-3,2),3,3)
A
A <- matrix(c(1,2,-1,2,1,1,-3,-3,2),3,3)
solve(A)
b = c(5,13,-8)
solve(A)%*%b
?solve
q14ans2 <- Deriv(q14)
q14ans2
q14ans2(5)
anitD((x * (x+7)^(1/2))~x)
antiD((x * (x+7)^(1/2))~x)
prob <- 1/540
prob
library(MASS)
fractions(prob)
prob <- 1/540
fractions(prob)
ProbH <-  13/52
probNF <- 40/52
Ans3 <- probH * probNF
fractions(Ans3)
probH <-  13/52
probNF <- 40/52
Ans3 <- probH * probNF
fractions(Ans3)
?norm
?Normal
m <- 1300
s <- sqrt(40000)
Ans <- pnorm(979,m,s,lower.tail=FALSE)
round(Ans, 4)
m <- 1100
s <- sqrt(1960000)
Ans <- pnorm(8340,m,s,lower.tail=FALSE)
round(Ans, 4)
m <- 1100
s <- sqrt(1960000)
Ans <- pnorm(8340,mean = m,sd = s,lower.tail=FALSE)
round(Ans, 4)
m <- 1100
s <- sqrt(1960000)
Ans <- pnorm(8340,mean = m,sd = s,lower.tail=FALSE)
round(Ans, 4)
m <- 1300
s <- sqrt(40000)
Ans <- pnorm(979,mean = m,sd =s,lower.tail=FALSE)
round(Ans, 4)
m <- 80
s <- 3
Ans <- pnorm(80,mean = m,sd = s) - pnorm(3, mean = m, sd = d)
round(Ans, 4)
m <- 80
s <- 3
Ans <- pnorm(80,mean = m,sd = s) - pnorm(3, mean = m, sd = s)
round(Ans, 4)
m <- 80
s <- 3
Ans <- pnorm(85,mean = m,sd = s) - pnorm(83, mean = m, sd = s)
round(Ans, 4)
m <- 456
s <- 123
Ans <- 1 - qnorm(0.86, mean = m, sd = 1)
round(Ans, 0)
m <- 456
s <- 123
Ans <- 1 - qnorm(0.14, mean = m, sd = 1)
round(Ans, 0)
m <- 456
s <- 123
Ans <- qnorm(0.14, mean = m, sd = 1)
round(Ans, 0)
m <- 456
s <- 123
Ans <- qnorm(86, mean = m, sd = 1)
round(Ans, 0)
m <- 456
s <- 123
Ans <- qnorm(14, mean = m, sd = 1)
round(Ans, 0)
m <- 456
s <- 123
Ans <- 1- qnorm(0.14, mean = m, sd = s)
round(Ans, 0)
m <- 456
s <- 123
Ans <- 1- qnorm(0.86, mean = m, sd = s)
round(Ans, 0)
m <- 456
s <- 123
Ans <- 1- qnorm(0.86, mean = m, sd = s)
abs(round(Ans, 0))
m <- 6.13
s <- 0.06
Ans1 <- qnorm(0.07, mean = m, sd = s)
Ans2 <- qnorm(0.93, mean = m, sd = s)
abs(round(Ans1, 0))
abs(round(Ans2,0))
m <- 6.13
s <- 0.06
Ans1 <- qnorm(0.07, mean = m, sd = s)
Ans2 <- 1- qnorm(0.93, mean = m, sd = s)
abs(round(Ans1, 0))
abs(round(Ans2,0))
m <- 78.8
s <- 9.8
Ans1 <- qnorm(0.2, mean = m, sd = s)
Ans2 <- 1- qnorm(0.45, mean = m, sd = s)
abs(round(Ans1, 0))
abs(round(Ans2,0))
m <- 78.8
s <- 9.8
Ans1 <- qnorm(0.55, mean = m, sd = s)
Ans2 <- 1- qnorm(0.45, mean = m, sd = s)
abs(round(Ans1, 0))
abs(round(Ans2,0))
m <- 78.8
s <- 9.8
Ans1 <- qnorm(0.20, mean = m, sd = s)
Ans2 <- 1- qnorm(0.45, mean = m, sd = s)
abs(round(Ans1, 0))
abs(round(Ans2,0))
m <- 21.2
s <- 5.4
Ans <- 1- qnorm(0.55, mean = m, sd = s)
abs(round(Ans, 1))
themean <- 48
thevar <- (7^2)/sqrt(147)
Ans <- pnorm(48.83, themean, sqrt(thevar))
round(Ans,4)
Ans <- pnorm(93.54, themean, sqrt(thevar), lower.tail = FALSE)
round(Ans,4)
Ans <- pnorm(93.54, themean, sqrt(thevar))
round(Ans,4)
Ans <- pnorm(93.54, themean, sqrt(thevar), lower.tail = FALSE)
round(Ans,4)
Ans <- pnorm(48.83, themean, sqrt(thevar), lower.tail = FALSE)
round(Ans,4)
themean <- 0.07
thesd <- sqrt((themean*(1-themean))/540)
Ans <- pnorm(10, themean, thesd) - pnorm(4,themean,thesd, lower.tail = FALSE)
round(Ans,4)
Ans <- pnorm(0.1, themean, thesd) - pnorm(0.04,themean,thesd, lower.tail = FALSE)
round(Ans,4)
Ans1 <- pnorm(0.1, themean, thesd)
Ans2 <- pnorm(0.04,themean,thesd, lower.tail = FALSE)
round(Ans,4)
Ans1 <- pnorm(0.1, themean, thesd)
Ans2 <- pnorm(0.04,themean,thesd)
round(Ans,4)
Ans1 <- pnorm(0.1, themean, thesd)
Ans2 <- pnorm(0.04,themean,thesd)
round(Ans2,4)
Ans1 <- pnorm(0.1, themean, thesd)
Ans2 <- pnorm(0.04,themean,thesd)
round(Ans1 - Ans2,4)
themean <- 0.23
thesd <- sqrt((themean*(1-themean))/602)
Ans1 <- pnorm(0.23+0.4, themean, thesd)
Ans2 <- pnorm(0.23-0.4,themean,thesd)
round(Ans1 - Ans2,4)
Ans1 <- pnorm(0.17, themean, thesd)
Ans2 <- pnorm(0.27,themean,thesd)
round(Ans1 - Ans2,4)
Ans1 <- pnorm(0.17, themean, thesd)
Ans2 <- pnorm(0.27,themean,thesd)
round(abs(Ans1 - Ans2,4))
Ans1 <- pnorm(0.17, themean, thesd)
Ans2 <- pnorm(0.27,themean,thesd)
round(abs(Ans1 - Ans2),4)
m <- 3.9
s <- 0.8
n <- 208
conf <- qnorm(0.1)*s/sqrt(n)
lower <- m - conf
upper <- m + conf
m <- 3.9
s <- 0.8
n <- 208
conf <- qnorm(0.1)*s/sqrt(n)
lower <- m - conf
upper <- m + conf
round(lower,1)
round(upper,1)
m <- 3.9
s <- 0.8
n <- 208
conf <- qnorm(0.1)*s/sqrt(n)
lower <- m - abs(conf)
upper <- m + abs(conf)
round(lower,1)
round(upper,1)
m <- 16.6
s <- 11
n <- 7472
conf <- qnorm(0.01)*s/sqrt(n)
lower <- m - abs(conf)
upper <- m + abs(conf)
round(lower,1)
round(upper,1)
values <- c(383.6, 347.1, 371.9, 347.6, 325.8, 337)
values <- c(383.6, 347.1, 371.9, 347.6, 325.8, 337)
mean(values)
themean <- round(mean(values), 2)
thesd <- round(sd(values), 2)
conf <- qnorm(0.05)*thesd/sqrt(length(values))
lower <- themean - abs(conf)
upper <- themean + abs(conf)
round(lower, 2)
round(upper, 2)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: Question1ans
m <- 1300
s <- sqrt(40000)
Ans <- pnorm(979,mean = m,sd =s,lower.tail=FALSE)
round(Ans, 4)
# Chunk 3: Question2ans
m <- 1100
s <- sqrt(1960000)
Ans <- pnorm(8340,mean = m,sd = s,lower.tail=FALSE)
round(Ans, 4)
# Chunk 4: Question3ans
m <- 80
s <- 3
Ans <- pnorm(85,mean = m,sd = s) - pnorm(83, mean = m, sd = s)
round(Ans, 4)
# Chunk 5: Question4ans
m <- 456
s <- 123
Ans <- 1- qnorm(0.86, mean = m, sd = s)
abs(round(Ans, 0))
# Chunk 6: Question5ans
m <- 6.13
s <- 0.06
Ans1 <- qnorm(0.07, mean = m, sd = s)
Ans2 <- 1- qnorm(0.93, mean = m, sd = s)
abs(round(Ans1, 0))
abs(round(Ans2,0))
# Chunk 7: Question6ans
m <- 78.8
s <- 9.8
Ans1 <- qnorm(0.20, mean = m, sd = s)
Ans2 <- 1- qnorm(0.45, mean = m, sd = s)
abs(round(Ans1, 0))
abs(round(Ans2,0))
# Chunk 8: Question7ans
m <- 21.2
s <- 5.4
Ans <- 1- qnorm(0.55, mean = m, sd = s)
abs(round(Ans, 1))
# Chunk 9: Question8ans
n <- 151
p <- 0.09
q <- 1 - p
themean <- n * p
thestd <- n * p * q
round(themean, 4)
round(thestd,4)
# Chunk 10: Question9ans
themean <- 48
thevar <- (7^2)/sqrt(147)
# Chunk 11: Question 9ansb
Ans <- pnorm(48.83, themean, sqrt(thevar), lower.tail = FALSE)
round(Ans,4)
# Chunk 12: Question10ans
themean <- 91
thevar <- (10^2)/sqrt(68)
# Chunk 13: Question10ansb
Ans <- pnorm(93.54, themean, sqrt(thevar), lower.tail = FALSE)
round(Ans,4)
# Chunk 14: Question11ans
themean <- 0.07
thesd <- sqrt((themean*(1-themean))/540)
# Chunk 15: Question11ansb
Ans1 <- pnorm(0.1, themean, thesd)
Ans2 <- pnorm(0.04,themean,thesd)
round(Ans1 - Ans2,4)
# Chunk 16: Question12ans
themean <- 0.23
thesd <- sqrt((themean*(1-themean))/602)
# Chunk 17: Question12ansb
Ans1 <- pnorm(0.17, themean, thesd)
Ans2 <- pnorm(0.27,themean,thesd)
round(abs(Ans1 - Ans2),4)
# Chunk 18: Question13ans
m <- 3.9
s <- 0.8
n <- 208
conf <- qnorm(0.1)*s/sqrt(n)
lower <- m - abs(conf)
upper <- m + abs(conf)
round(lower,1)
round(upper,1)
# Chunk 19: Question14ans
m <- 16.6
s <- 11
n <- 7472
conf <- qnorm(0.01)*s/sqrt(n)
lower <- m - abs(conf)
upper <- m + abs(conf)
round(lower,1)
round(upper,1)
# Chunk 20: question16ans
values <- c(383.6, 347.1, 371.9, 347.6, 325.8, 337)
# Chunk 21: question16ansb
themean <- round(mean(values), 2)
# Chunk 22: question16ansc
thesd <- round(sd(values), 2)
# Chunk 23: question16d
conf <- qnorm(0.05)*thesd/sqrt(length(values))
# Chunk 24: question16e
lower <- themean - abs(conf)
upper <- themean + abs(conf)
round(lower, 2)
round(upper, 2)
library(stringr)
library(XML)
install.packages("XML")
library(XML)
library(maps)
install.packages("maps")
library(maps)
heritage_parsed <- htmlParse("http://en.wikipedia.org/wiki/List_of_World_Heritage_in_Danger", encoding = "UTF-8")
heritage_parsed <- htmlParse("https://en.wikipedia.org/wiki/List_of_World_Heritage_in_Danger", encoding = "UTF-8")
tables <- readHTML(heritage_parsed, stringsAsFactors = FALSE)
tables <- readHTMLTable(heritage_parsed, stringsAsFactors = FALSE)
heritage_parsed
install.packages("rvest")
library(rvest)
heritage_parsed <- read_html("https://en.wikipedia.org/wiki/List_of_World_Heritage_in_Danger", encoding = "UTF-8")
View(hertage_parsed)
View(heritage_parsed)
tables <- html_table(heritage_parsed, fill = TRUE)
tables
View(tables)
danger_table <- tables[2]
danger_table
danger_table <- danger_table <- tables[[2]]
View (danger_table)
names(danger_table)
danger_table < danger_table[, c(1,3,4,6,7)]
danger_table <- danger_table[, c(1,3,4,6,7)]
colnames(danger_table) <- c("name", "locn", "crit", "yins", "yend")
danger_table$name[1:3]
dangeer_table$crit <- ifelse(str_detect(danger_table)
library(stringr)
linrary(XML)
library(XML)
library(maps)
library(rvest)
heritage_parsed <- read_html("http://en.wikipedia.org/wiki/List_of_World_Heritage_in_Danger", encoding = "UTF-8")
tables <- html_table(heritage_parsed, fill = TRUE)
tables
danger_table <- danger_table <- tables[[2]]
names(danger_table)
danger_table < danger_table[,c(1,3,4,6,7)]
danger_table <- danger_table[,c(1,3,4,6,7)]
colnames(danger_table) <- c("name", "locn", "crit", "yins", "yend")
danger_table$name[1:3]
danger_table$crit <- ifelse(str_detect(danger_table$crit, "Natural") == TRUE, "nat", "cult")
danger_table$crit[1:3]
danger_table$yins <- as.numeric(danger_table$yins)
danger_table$yins[1:3]
yend_clean <- unlist(str_extract_all(danger_table$yend, "[[:digit:]]4$"))
danger_table$yend <- as.numeric(yend_clean)
danger_table$yend[1:3]
danger_table$yend <- as.numeric(yend_clean)
yend_clean <- unlist(str_extract_all(danger_table$yend, "[[:digit:]]{4}$"))
danger_table$yend <- as.numeric(yend_clean)
yend_clean <- unlist(str_extract_all(danger_table$yend, "[[:digit:]]{4}$"))
danger_table$yend <- as.numeric(yend_clean)
install.packages("tidyr")
url <- "http://www.r-datacollection.com/materials/html/fortunes.html"
fortunes <- readLines(con = url)
url <- "http://www.r-datacollection.com/materials/html/fortunes.html"
fortunes <- readLines(con = url)
#Parsing the Code using htmlParse
library(XML)
parsed_fortunes <- htmlParse(file = url)
print(parsed_fortunes)
#Using a handler function for discarding the <body> node and its children
h1 <- list("body" = function(x){NULL})
parsed_fortunes <- htmlTreeParse(url, handlers = h1, asTree = TRUE)
parsed_fortunes$children
h2 <- list(
startElement = function(node, ...){
name <- xmlName(node)
if(name %in% c("div", "title")){NULL}else{node}
},
comment = function(node){NULL}
)
parsed_fortunes <- htmlTreeParse(file = url, handlers = h2, asTree = TRUE)
parsed_fortunes$children
getItalics = function() {
i_container = character()
list(i = function(node, ...){
i_container <<- c(i_container, xmlValue(node))
},
returnI = function() i_container)
}
#Instantiating an instance of the handler
h3 <- getItalics()
#Executing the parsing with the instatiated handler and printing the returned data
invisible(htmlTreeParse(url, handlers = h3))
h3$returnI()
library(RCurl)
library(XML)
library(stringr)
library(plyr)
setwd("~/CUNY/DATA606-Submissions/Lab5")
load("more/nc.RData")
load("more/nc.RData")
summary(nc)
boxplot(nc$habit, nc$weight)
by(nc$weight, nc$habit, mean)
by(nc$weight, nc$habit, length)
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical",
order = c("smoker","nonsmoker"))
inference(y = nc$weeks, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = nc$weeks, est = "mean", type = "ci", null = 0,
alternative = "twosided", method = "theoretical", conflevel = 0.90)
inference(y = nc$weight, x = nc$mature, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
library(dplyr)
mature_rows <- filter(nc, mature == "mature mom")
younger_rows <- filter(nc, mature == "younger mom")
min_mature <- min(mature_rows$fage,na.rm = TRUE)
max_younger <- max(younger_rows$fage, na.rm = TRUE)
cut_off <- (abs(min_mature - max_younger))/2
cut_off <- (min_mature + max_younger)/2
inference(y = nc$fage, x = nc$premie, est = "mean", type = "ht", null = 0,
alternative = "greater", method = "theoretical")
inference(y = nc$fage, x = nc$premie, est = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
